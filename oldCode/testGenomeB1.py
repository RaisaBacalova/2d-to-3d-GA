import unittest
import genomeB1
import os

class GenomeTest (unittest.TestCase):
    # def testClassExists(self):
    #     self.assertIsNotNone(genomeB.Genome)

    # def testRandomGene(self):
    #     self.assertIsNotNone(genomeB.Genome.get_random_gene)

    # def testRandomGeneNotNone(self):
    #     self.assertIsNotNone(genomeB.Genome.get_random_gene(5))
    
    # def testRandomGenomeExists(self):
    #     data = genomeB1.Genome.get_random_genome(20, 5)
    #     self.assertIsNotNone(data)

    # def testGeneSpecExist(self):
    #     spec = genomeB1.Genome.get_gene_spec()
    #     self.assertIsNotNone(spec)

    # def testGeneSpecHasLinkLength(self):
    #     spec = genomeB1.Genome.get_gene_spec()
    #     self.assertIsNotNone(spec['x'])

    # def testGeneSpecHasLinkLength(self):
    #     spec = genomeB1.Genome.get_gene_spec()
    #     self.assertIsNotNone(spec['x']["ind"])

    # def testGeneSpecScale(self):
    #     spec = genomeB.Genome.get_gene_spec()
    #     gene = genomeB.Genome.get_random_gene(20)
    #     self.assertGreater(gene[spec["verts-x"]["ind"]], 0)

    # def testGeneToGeneDict(self):
    #     spec = genomeB1.Genome.get_gene_spec()
    #     gene = genomeB1.Genome.get_random_gene(len(spec))
    #     gene_dict = genomeB1.Genome.get_gene_dict(gene, spec)
    #     print(gene_dict)
    #     self.assertIn("connected_to", gene_dict)


    def testFlatLinks(self):
        #verts = [[154, 137, 2.166666666666667], [154, 147, 2.25], [131, 155, 2.5], [127, 156, 2.5], [169, 156, 2.0227272727272725], [149, 156, 22.022727272727273], [129, 156, 4.022727272727273], [181, 161, 2.015151515151515], [161, 161, 22.015151515151516], [141, 161, 26.015151515151516], [121, 161, 6.015151515151516], [156, 164, 2.0227272727272725], [136, 164, 22.022727272727273], [116, 164, 4.022727272727273], [153, 171, 2.0212765957446805], [133, 171, 22.02127659574468], [113, 171, 8.02127659574468], [199, 174, 2.0105263157894737], [179, 174, 22.010526315789473], [159, 174, 42.01052631578948], [139, 174, 36.01052631578948], [119, 174, 16.010526315789477], [102, 181, 2.0098039215686274], [122, 181, 22.009803921568626], [142, 181, 42.009803921568626], [162, 181, 42.009803921568626], [182, 181, 22.009803921568633], [202, 181, 2.0098039215686327], [99, 189, 2.0091743119266052], [119, 189, 22.009174311926607], [139, 189, 42.00917431192661], [159, 189, 50.00917431192661], [179, 189, 30.0091743119266], [199, 189, 10.0091743119266], [97, 199, 2.008928571428571], [117, 199, 22.008928571428573], [137, 199, 42.00892857142857], [157, 199, 52.00892857142857], [177, 199, 32.00892857142857], [197, 199, 12.00892857142857], [97, 209, 2.008928571428571], [117, 209, 22.008928571428573], [137, 209, 42.00892857142857], [157, 209, 52.00892857142857], [177, 209, 32.00892857142857], [197, 209, 12.00892857142857], [98, 219, 2.009090909090909], [118, 219, 22.009090909090908], [138, 219, 42.00909090909091], [158, 219, 50.00909090909091], [178, 219, 30.009090909090915], [198, 219, 10.009090909090915], [202, 228, 2.0097087378640777], [182, 228, 22.009708737864077], [162, 228, 42.00970873786408], [142, 228, 44.00970873786408], [122, 228, 24.009708737864074], [102, 228, 4.009708737864074], [199, 235, 2.010416666666667], [179, 235, 22.010416666666668], [159, 235, 42.010416666666664], [139, 235, 36.010416666666664], [119, 235, 16.01041666666667], [196, 241, 2.011111111111111], [176, 241, 22.011111111111113], [156, 241, 42.01111111111111], [136, 241, 30.011111111111113], [116, 241, 10.011111111111106], [192, 247, 2.0121951219512195], [172, 247, 22.01219512195122], [152, 247, 42.01219512195122], [132, 247, 22.012195121951223], [112, 247, 2.0121951219512226], [184, 258, 2.015625], [164, 258, 22.015625], [144, 258, 24.015625], [124, 258, 4.015625], [179, 263, 2.0185185185185186], [159, 263, 22.01851851851852], [139, 263, 14.018518518518519], [173, 267, 2.0232558139534884], [153, 267, 22.02325581395349], [133, 267, 4.02325581395349], [142, 270, 2.5], [155, 272, 2.142857142857143]]
        
        #arr4 = [[[154, 137, 2.166666666666667]], [[154, 147, 2.25]], [[131, 155, 2.5]], [[127, 156, 2.5], [129, 156, 4.022727272727273], [149, 156, 22.022727272727273], [169, 156, 2.0227272727272725]], [[121, 161, 6.015151515151516], [141, 161, 26.015151515151516], [161, 161, 22.015151515151516], [181, 161, 2.015151515151515]], [[116, 164, 4.022727272727273], [136, 164, 22.022727272727273], [156, 164, 2.0227272727272725]], [[113, 171, 8.02127659574468], [133, 171, 22.02127659574468], [153, 171, 2.0212765957446805]], [[119, 174, 16.010526315789477], [139, 174, 36.01052631578948], [159, 174, 42.01052631578948], [179, 174, 22.010526315789473], [199, 174, 2.0105263157894737]], [[102, 181, 2.0098039215686274], [122, 181, 22.009803921568626], [142, 181, 42.009803921568626], [162, 181, 42.009803921568626], [182, 181, 22.009803921568633], [202, 181, 2.0098039215686327]], [[99, 189, 2.0091743119266052], [119, 189, 22.009174311926607], [139, 189, 42.00917431192661], [159, 189, 50.00917431192661], [179, 189, 30.0091743119266], [199, 189, 10.0091743119266]], [[97, 199, 2.008928571428571], [117, 199, 22.008928571428573], [137, 199, 42.00892857142857], [157, 199, 52.00892857142857], [177, 199, 32.00892857142857], [197, 199, 12.00892857142857]], [[97, 209, 2.008928571428571], [117, 209, 22.008928571428573], [137, 209, 42.00892857142857], [157, 209, 52.00892857142857], [177, 209, 32.00892857142857], [197, 209, 12.00892857142857]], [[98, 219, 2.009090909090909], [118, 219, 22.009090909090908], [138, 219, 42.00909090909091], [158, 219, 50.00909090909091], [178, 219, 30.009090909090915], [198, 219, 10.009090909090915]], [[102, 228, 4.009708737864074], [122, 228, 24.009708737864074], [142, 228, 44.00970873786408], [162, 228, 42.00970873786408], [182, 228, 22.009708737864077], [202, 228, 2.0097087378640777]], [[119, 235, 16.01041666666667], [139, 235, 36.010416666666664], [159, 235, 42.010416666666664], [179, 235, 22.010416666666668], [199, 235, 2.010416666666667]], [[116, 241, 10.011111111111106], [136, 241, 30.011111111111113], [156, 241, 42.01111111111111], [176, 241, 22.011111111111113], [196, 241, 2.011111111111111]], [[112, 247, 2.0121951219512226], [132, 247, 22.012195121951223], [152, 247, 42.01219512195122], [172, 247, 22.01219512195122], [192, 247, 2.0121951219512195]], [[124, 258, 4.015625], [144, 258, 24.015625], [164, 258, 22.015625], [184, 258, 2.015625]], [[139, 263, 14.018518518518519], [159, 263, 22.01851851851852], [179, 263, 2.0185185185185186]], [[133, 267, 4.02325581395349], [153, 267, 22.02325581395349], [173, 267, 2.0232558139534884]]]
        arr5 = [[{'id': 0, 'data': [154, 137, 2.166666666666667]}], [{'id': 1, 'data': [154, 147, 2.25]}], [{'id': 2, 'data': [131, 155, 2.5]}], [{'id': 3, 'data': [127, 156, 2.5]}, {'id': 4, 'data': [129, 156, 4.022727272727273]}, {'id': 5, 'data': [149, 156, 22.022727272727273]}, {'id': 6, 'data': [169, 156, 2.0227272727272725]}], [{'id': 7, 'data': [121, 161, 6.015151515151516]}, {'id': 8, 'data': [141, 161, 26.015151515151516]}, {'id': 9, 'data': [161, 161, 22.015151515151516]}, {'id': 10, 'data': [181, 161, 2.015151515151515]}], [{'id': 11, 'data': [116, 164, 4.022727272727273]}, {'id': 12, 'data': [136, 164, 22.022727272727273]}, {'id': 13, 'data': [156, 164, 2.0227272727272725]}], [{'id': 14, 'data': [113, 171, 8.02127659574468]}, {'id': 15, 'data': [133, 171, 22.02127659574468]}, {'id': 16, 'data': [153, 171, 2.0212765957446805]}], [{'id': 17, 'data': [119, 174, 16.010526315789477]}, {'id': 18, 'data': [139, 174, 36.01052631578948]}, {'id': 19, 'data': [159, 174, 42.01052631578948]}, {'id': 20, 'data': [179, 174, 22.010526315789473]}, {'id': 21, 'data': [199, 174, 2.0105263157894737]}], [{'id': 22, 'data': [102, 181, 2.0098039215686274]}, {'id': 23, 'data': [122, 181, 22.009803921568626]}, {'id': 24, 'data': [142, 181, 42.009803921568626]}, {'id': 25, 'data': [162, 181, 42.009803921568626]}, {'id': 26, 'data': [182, 181, 22.009803921568633]}, {'id': 27, 'data': [202, 181, 2.0098039215686327]}], [{'id': 28, 'data': [99, 189, 2.0091743119266052]}, {'id': 29, 'data': [119, 189, 22.009174311926607]}, {'id': 30, 'data': [139, 189, 42.00917431192661]}, {'id': 31, 'data': [159, 189, 50.00917431192661]}, {'id': 32, 'data': [179, 189, 30.0091743119266]}, {'id': 33, 'data': [199, 189, 10.0091743119266]}], [{'id': 34, 'data': [97, 199, 2.008928571428571]}, {'id': 35, 'data': [117, 199, 22.008928571428573]}, {'id': 36, 'data': [137, 199, 42.00892857142857]}, {'id': 37, 'data': [157, 199, 52.00892857142857]}, {'id': 38, 'data': [177, 199, 32.00892857142857]}, {'id': 39, 'data': [197, 199, 12.00892857142857]}], [{'id': 40, 'data': [97, 209, 2.008928571428571]}, {'id': 41, 'data': [117, 209, 22.008928571428573]}, {'id': 42, 'data': [137, 209, 42.00892857142857]}, {'id': 43, 'data': [157, 209, 52.00892857142857]}, {'id': 44, 'data': [177, 209, 32.00892857142857]}, {'id': 45, 'data': [197, 209, 12.00892857142857]}], [{'id': 46, 'data': [98, 219, 2.009090909090909]}, {'id': 47, 'data': [118, 219, 22.009090909090908]}, {'id': 48, 'data': [138, 219, 42.00909090909091]}, {'id': 49, 'data': [158, 219, 50.00909090909091]}, {'id': 50, 'data': [178, 219, 30.009090909090915]}, {'id': 51, 'data': [198, 219, 10.009090909090915]}], [{'id': 52, 'data': [102, 228, 4.009708737864074]}, {'id': 53, 'data': [122, 228, 24.009708737864074]}, {'id': 54, 'data': [142, 228, 44.00970873786408]}, {'id': 55, 'data': [162, 228, 42.00970873786408]}, {'id': 56, 'data': [182, 228, 22.009708737864077]}, {'id': 57, 'data': [202, 228, 2.0097087378640777]}], [{'id': 58, 'data': [119, 235, 16.01041666666667]}, {'id': 59, 'data': [139, 235, 36.010416666666664]}, {'id': 60, 'data': [159, 235, 42.010416666666664]}, {'id': 61, 'data': [179, 235, 22.010416666666668]}, {'id': 62, 'data': [199, 235, 2.010416666666667]}], [{'id': 63, 'data': [116, 241, 10.011111111111106]}, {'id': 64, 'data': [136, 241, 30.011111111111113]}, {'id': 65, 'data': [156, 241, 42.01111111111111]}, {'id': 66, 'data': [176, 241, 22.011111111111113]}, {'id': 67, 'data': [196, 241, 2.011111111111111]}], [{'id': 68, 'data': [112, 247, 2.0121951219512226]}, {'id': 69, 'data': [132, 247, 22.012195121951223]}, {'id': 70, 'data': [152, 247, 42.01219512195122]}, {'id': 71, 'data': [172, 247, 22.01219512195122]}, {'id': 72, 'data': [192, 247, 2.0121951219512195]}], [{'id': 73, 'data': [124, 258, 4.015625]}, {'id': 74, 'data': [144, 258, 24.015625]}, {'id': 75, 'data': [164, 258, 22.015625]}, {'id': 76, 'data': [184, 258, 2.015625]}], [{'id': 77, 'data': [139, 263, 14.018518518518519]}, {'id': 78, 'data': [159, 263, 22.01851851851852]}, {'id': 79, 'data': [179, 263, 2.0185185185185186]}], [{'id': 80, 'data': [133, 267, 4.02325581395349]}, {'id': 81, 'data': [153, 267, 22.02325581395349]}, {'id': 82, 'data': [173, 267, 2.0232558139534884]}]]
        links = []

        for i in range(len(arr5)):
            for j in range(len(arr5[i])):
                if(len(arr5[i]) < 2):
                    links.append(genomeB1.JSONLink(name=arr5[i][j]['id'], connected_to=arr5[i+1][j]['id']))
                else:
                    if (j != len(arr5[i])-1):
                        links.append(genomeB1.JSONLink(name=arr5[i][j]['id'], connected_to=arr5[i][j+1]['id']))
                        if (i != len(arr5)-1):
                            links.append(genomeB1.JSONLink(name=arr5[i][j]['id'], connected_to=arr5[i+1][j]['id']))
                    else:
                        if(i != len(arr5)-1):
                            links.append(genomeB1.JSONLink(name=arr5[i][j]['id'], connected_to=arr5[i+1][len(arr5[i+1])-1]['id']))
        for i in links:
            print(i.name, i.connected_to)
        print(len(links))
        self.assertIsNotNone(links)

    # def testExpandLinks(self):
    #     #verts = [[152, 131, 0.0], [154, 137, 0.0], [154, 147, 0.0], [131, 155, 0.0], [127, 156, 0.0], [169, 156, 0.0], [149, 156, 0.0], [129, 156, 0.0], [120, 159, 0.0], [181, 161, 0.0], [161, 161, 0.0], [141, 161, 0.0], [121, 161, 0.0], [156, 164, 0.0], [136, 164, 0.0], [116, 164, 0.0], [110, 168, 0.0], [153, 171, 0.0], [133, 171, 0.0], [113, 171, 0.0], [199, 174, 0.0], [179, 174, 0.0], [159, 174, 0.0], [139, 174, 0.0], [119, 174, 0.0], [102, 181, 0.0], [122, 181, 0.0], [142, 181, 0.0], [162, 181, 0.0], [182, 181, 0.0], [202, 181, 0.0], [99, 189, 0.0], [119, 189, 0.0], [139, 189, 0.0], [159, 189, 0.0], [179, 189, 0.0], [199, 189, 0.0], [97, 199, 0.0], [117, 199, 0.0], [137, 199, 0.0], [157, 199, 0.0], [177, 199, 0.0], [197, 199, 0.0], [97, 209, 0.0], [117, 209, 0.0], [137, 209, 0.0], [157, 209, 0.0], [177, 209, 0.0], [197, 209, 0.0], [98, 219, 0.0], [118, 219, 0.0], [138, 219, 0.0], [158, 219, 0.0], [178, 219, 0.0], [198, 219, 0.0], [202, 228, 0.0], [182, 228, 0.0], [162, 228, 0.0], [142, 228, 0.0], [122, 228, 0.0], [102, 228, 0.0], [199, 235, 0.0], [179, 235, 0.0], [159, 235, 0.0], [139, 235, 0.0], [119, 235, 0.0], [196, 241, 0.0], [176, 241, 0.0], [156, 241, 0.0], [136, 241, 0.0], [116, 241, 0.0], [192, 247, 0.0], [172, 247, 0.0], [152, 247, 0.0], [132, 247, 0.0], [112, 247, 0.0], [117, 253, 0.0], [184, 258, 0.0], [164, 258, 0.0], [144, 258, 0.0], [124, 258, 0.0], [179, 263, 0.0], [159, 263, 0.0], [139, 263, 0.0], [173, 267, 0.0], [153, 267, 0.0], [133, 267, 0.0], [142, 270, 0.0], [155, 272, 0.0]]
    #     verts = [[152, 130, 3.0], [154, 137, 2.166666666666667], [154, 147, 2.25], [131, 155, 2.5], [127, 156, 2.5], [169, 156, 2.0227272727272725], [149, 156, 22.022727272727273], [129, 156, 4.022727272727273], [120, 159, 3.0], [181, 161, 2.015151515151515], [161, 161, 22.015151515151516], [141, 161, 26.015151515151516], [121, 161, 6.015151515151516], [156, 164, 2.0227272727272725], [136, 164, 22.022727272727273], [116, 164, 4.022727272727273], [110, 168, 3.0], [153, 171, 2.0212765957446805], [133, 171, 22.02127659574468], [113, 171, 8.02127659574468], [199, 174, 2.0105263157894737], [179, 174, 22.010526315789473], [159, 174, 42.01052631578948], [139, 174, 36.01052631578948], [119, 174, 16.010526315789477], [102, 181, 2.0098039215686274], [122, 181, 22.009803921568626], [142, 181, 42.009803921568626], [162, 181, 42.009803921568626], [182, 181, 22.009803921568633], [202, 181, 2.0098039215686327], [99, 189, 2.0091743119266052], [119, 189, 22.009174311926607], [139, 189, 42.00917431192661], [159, 189, 50.00917431192661], [179, 189, 30.0091743119266], [199, 189, 10.0091743119266], [97, 199, 2.008928571428571], [117, 199, 22.008928571428573], [137, 199, 42.00892857142857], [157, 199, 52.00892857142857], [177, 199, 32.00892857142857], [197, 199, 12.00892857142857], [97, 209, 2.008928571428571], [117, 209, 22.008928571428573], [137, 209, 42.00892857142857], [157, 209, 52.00892857142857], [177, 209, 32.00892857142857], [197, 209, 12.00892857142857], [98, 219, 2.009090909090909], [118, 219, 22.009090909090908], [138, 219, 42.00909090909091], [158, 219, 50.00909090909091], [178, 219, 30.009090909090915], [198, 219, 10.009090909090915], [202, 228, 2.0097087378640777], [182, 228, 22.009708737864077], [162, 228, 42.00970873786408], [142, 228, 44.00970873786408], [122, 228, 24.009708737864074], [102, 228, 4.009708737864074], [199, 235, 2.010416666666667], [179, 235, 22.010416666666668], [159, 235, 42.010416666666664], [139, 235, 36.010416666666664], [119, 235, 16.01041666666667], [196, 241, 2.011111111111111], [176, 241, 22.011111111111113], [156, 241, 42.01111111111111], [136, 241, 30.011111111111113], [116, 241, 10.011111111111106], [192, 247, 2.0121951219512195], [172, 247, 22.01219512195122], [152, 247, 42.01219512195122], [132, 247, 22.012195121951223], [112, 247, 2.0121951219512226], [117, 253, 3.0], [184, 258, 2.015625], [164, 258, 22.015625], [144, 258, 24.015625], [124, 258, 4.015625], [179, 263, 2.0185185185185186], [159, 263, 22.01851851851852], [139, 263, 14.018518518518519], [173, 267, 2.0232558139534884], [153, 267, 22.02325581395349], [133, 267, 4.02325581395349], [142, 270, 2.5], [155, 272, 2.142857142857143]]
    #     links = []

    #     for i in range(len(verts))[:6:]:
    #         if (i == 0):
    #             links.append(genomeB.JSONLink(name=i, parent_name="None", recur=2)) 
    #         else:
    #             #attempt for triangle
    #             # for j in range(2):
    #             #     links.append(genomeB.JSONLink(name=i, parent_name=j, recur=2))
    #             if (i < 3):
    #                 links.append(genomeB.JSONLink(name=i, parent_name=0, recur=0))

    #             #attempt for square 
    #             for j in range(3):
    #                 #print(i, j)
    #                 links.append(genomeB.JSONLink(name=i, parent_name=j+i+1, recur=0))
                    
    #             # print("Name: ", links[i].name, links[i].parent_name)
    #             #normal
    #             #links.append(genomeB.JSONLink(name=i, parent_name=i+1, recur=1))

    #     exp_links = []
    #     for i in range(len(links)):
    #         # if (type(links[i].name) != int):
    #         #     links[i].name = i
    #         exp_links.append(links[i])
    #         genomeB.Genome.expandLinks(links[i], links, exp_links)  #links[i].name,  

    #     names = [l.name for l in exp_links]
    #     parent_names = [l.parent_name for l in exp_links]
    #     print(names)
    #     print(parent_names)
        #print(len(names))
    # #     # self.assertEqual(len(exp_links), 5)

unittest.main()