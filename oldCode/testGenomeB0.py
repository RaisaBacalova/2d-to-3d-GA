import unittest
import genomeB0
import os

class GenomeTest (unittest.TestCase):
    # def testClassExists(self):
    #     self.assertIsNotNone(genomeB.Genome)

    # def testRandomGene(self):
    #     self.assertIsNotNone(genomeB.Genome.get_random_gene)

    # def testRandomGeneNotNone(self):
    #     self.assertIsNotNone(genomeB.Genome.get_random_gene(5))
    
    # def testRandomGenomeExists(self):
    #     data = genomeB.Genome.get_random_genome(20, 5)
    #     self.assertIsNotNone(data)

    # def testGeneSpecExist(self):
    #     spec = genomeB.Genome.get_gene_spec()
    #     self.assertIsNotNone(spec)

    # def testGeneSpecHasLinkLength(self):
    #     spec = genomeB.Genome.get_gene_spec()
    #     self.assertIsNotNone(spec['verts-x'])

    # def testGeneSpecHasLinkLength(self):
    #     spec = genomeB.Genome.get_gene_spec()
    #     self.assertIsNotNone(spec['verts-x']["ind"])

    # def testGeneSpecScale(self):
    #     spec = genomeB.Genome.get_gene_spec()
    #     gene = genomeB.Genome.get_random_gene(20)
    #     self.assertGreater(gene[spec["verts-x"]["ind"]], 0)

    # def testGeneToGeneDict(self):
    #     spec = genomeB.Genome.get_gene_spec()
    #     gene = genomeB.Genome.get_random_gene(len(spec))
    #     gene_dict = genomeB.Genome.get_gene_dict(gene, spec)
    #     self.assertIn("verts-recurrence", gene_dict)


    # def testFlatLinks(self):
    #     verts = [[152, 131, 0.0], [154, 137, 0.0], [154, 147, 0.0], [131, 155, 0.0], [127, 156, 0.0], [169, 156, 0.0], [149, 156, 0.0], [129, 156, 0.0], [120, 159, 0.0], [181, 161, 0.0], [161, 161, 0.0], [141, 161, 0.0], [121, 161, 0.0], [156, 164, 0.0], [136, 164, 0.0], [116, 164, 0.0], [110, 168, 0.0], [153, 171, 0.0], [133, 171, 0.0], [113, 171, 0.0], [199, 174, 0.0], [179, 174, 0.0], [159, 174, 0.0], [139, 174, 0.0], [119, 174, 0.0], [102, 181, 0.0], [122, 181, 0.0], [142, 181, 0.0], [162, 181, 0.0], [182, 181, 0.0], [202, 181, 0.0], [99, 189, 0.0], [119, 189, 0.0], [139, 189, 0.0], [159, 189, 0.0], [179, 189, 0.0], [199, 189, 0.0], [97, 199, 0.0], [117, 199, 0.0], [137, 199, 0.0], [157, 199, 0.0], [177, 199, 0.0], [197, 199, 0.0], [97, 209, 0.0], [117, 209, 0.0], [137, 209, 0.0], [157, 209, 0.0], [177, 209, 0.0], [197, 209, 0.0], [98, 219, 0.0], [118, 219, 0.0], [138, 219, 0.0], [158, 219, 0.0], [178, 219, 0.0], [198, 219, 0.0], [202, 228, 0.0], [182, 228, 0.0], [162, 228, 0.0], [142, 228, 0.0], [122, 228, 0.0], [102, 228, 0.0], [199, 235, 0.0], [179, 235, 0.0], [159, 235, 0.0], [139, 235, 0.0], [119, 235, 0.0], [196, 241, 0.0], [176, 241, 0.0], [156, 241, 0.0], [136, 241, 0.0], [116, 241, 0.0], [192, 247, 0.0], [172, 247, 0.0], [152, 247, 0.0], [132, 247, 0.0], [112, 247, 0.0], [117, 253, 0.0], [184, 258, 0.0], [164, 258, 0.0], [144, 258, 0.0], [124, 258, 0.0], [179, 263, 0.0], [159, 263, 0.0], [139, 263, 0.0], [173, 267, 0.0], [153, 267, 0.0], [133, 267, 0.0], [142, 270, 0.0], [155, 272, 0.0]]
    #     edges = [[0, 1], [1, 2], [2, 3], [3, 4], [5, 6], [6, 7], [7, 8], [9, 10], [10, 11], [11, 12], [13, 14], [14, 15], [15, 16], [17, 18], [18, 19], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [37, 38], [38, 39], [39, 40], [40, 41], [41, 42], [43, 44], [44, 45], [45, 46], [46, 47], [47, 48], [49, 50], [50, 51], [51, 52], [52, 53], [53, 54], [54, 55], [55, 56], [56, 57], [57, 58], [58, 59], [59, 60], [61, 62], [62, 63], [63, 64], [64, 65], [66, 67], [67, 68], [68, 69], [69, 70], [71, 72], [72, 73], [73, 74], [74, 75], [75, 76], [77, 78], [78, 79], [79, 80], [81, 82], [82, 83], [84, 85], [85, 86], [86, 87], [87, 88], [0, 12], [1, 13], [2, 14], [3, 15], [4, 16], [5, 17], [6, 18], [7, 19], [8, 20], [9, 21], [10, 22], [11, 23], [12, 24], [13, 25], [14, 26], [15, 27], [16, 28], [17, 29], [18, 30], [19, 31], [20, 32], [21, 33], [22, 34], [23, 35], [24, 36], [25, 37], [26, 38], [27, 39], [28, 40], [29, 41], [30, 42], [31, 43], [32, 44], [33, 45], [34, 46], [35, 47], [36, 48], [37, 49], [38, 50], [39, 51], [40, 52], [41, 53], [42, 54], [43, 55], [44, 56], [45, 57], [46, 58], [47, 59], [48, 60], [49, 61], [50, 62], [51, 63], [52, 64], [53, 65], [54, 66], [55, 67], [56, 68], [57, 69], [58, 70], [59, 71], [60, 72], [61, 73], [62, 74], [63, 75], [64, 76], [65, 77], [66, 78], [67, 79], [68, 80], [69, 81], [70, 82], [71, 83], [72, 84]]
    #     links = []
    #     for i in range(len(edges))[:4:]:
    #         if (i == 0):
    #             links.append(genomeB.JSONLink(name=verts[i], parent_name="None", recur=1))     
    #             # links = [
    #             # genomeB.JSONLink(name=str(edges[i][j]), parent_name="None", recur=1),
    #             # genomeB.JSONLink(name=str(edges[i][j]), parent_name=str(edges[i][j-1]), recur=2), 
    #             # genomeB.JSONLink(name=str(edges[i][j]), parent_name=str(edges[i][j-1]), recur=2)
    #             # ]
    #         else:   
    #             links.append(genomeB.JSONLink(name=verts[i], parent_name=verts[i-1], recur=2))
    #     for i in links:
    #         print(i.name, i.parent_name)
    #     self.assertIsNotNone(links)

    def testExpandLinks(self):
        #verts = [[152, 131, 0.0], [154, 137, 0.0], [154, 147, 0.0], [131, 155, 0.0], [127, 156, 0.0], [169, 156, 0.0], [149, 156, 0.0], [129, 156, 0.0], [120, 159, 0.0], [181, 161, 0.0], [161, 161, 0.0], [141, 161, 0.0], [121, 161, 0.0], [156, 164, 0.0], [136, 164, 0.0], [116, 164, 0.0], [110, 168, 0.0], [153, 171, 0.0], [133, 171, 0.0], [113, 171, 0.0], [199, 174, 0.0], [179, 174, 0.0], [159, 174, 0.0], [139, 174, 0.0], [119, 174, 0.0], [102, 181, 0.0], [122, 181, 0.0], [142, 181, 0.0], [162, 181, 0.0], [182, 181, 0.0], [202, 181, 0.0], [99, 189, 0.0], [119, 189, 0.0], [139, 189, 0.0], [159, 189, 0.0], [179, 189, 0.0], [199, 189, 0.0], [97, 199, 0.0], [117, 199, 0.0], [137, 199, 0.0], [157, 199, 0.0], [177, 199, 0.0], [197, 199, 0.0], [97, 209, 0.0], [117, 209, 0.0], [137, 209, 0.0], [157, 209, 0.0], [177, 209, 0.0], [197, 209, 0.0], [98, 219, 0.0], [118, 219, 0.0], [138, 219, 0.0], [158, 219, 0.0], [178, 219, 0.0], [198, 219, 0.0], [202, 228, 0.0], [182, 228, 0.0], [162, 228, 0.0], [142, 228, 0.0], [122, 228, 0.0], [102, 228, 0.0], [199, 235, 0.0], [179, 235, 0.0], [159, 235, 0.0], [139, 235, 0.0], [119, 235, 0.0], [196, 241, 0.0], [176, 241, 0.0], [156, 241, 0.0], [136, 241, 0.0], [116, 241, 0.0], [192, 247, 0.0], [172, 247, 0.0], [152, 247, 0.0], [132, 247, 0.0], [112, 247, 0.0], [117, 253, 0.0], [184, 258, 0.0], [164, 258, 0.0], [144, 258, 0.0], [124, 258, 0.0], [179, 263, 0.0], [159, 263, 0.0], [139, 263, 0.0], [173, 267, 0.0], [153, 267, 0.0], [133, 267, 0.0], [142, 270, 0.0], [155, 272, 0.0]]
        verts = [[152, 130, 3.0], [154, 137, 2.166666666666667], [154, 147, 2.25], [131, 155, 2.5], [127, 156, 2.5], [169, 156, 2.0227272727272725], [149, 156, 22.022727272727273], [129, 156, 4.022727272727273], [120, 159, 3.0], [181, 161, 2.015151515151515], [161, 161, 22.015151515151516], [141, 161, 26.015151515151516], [121, 161, 6.015151515151516], [156, 164, 2.0227272727272725], [136, 164, 22.022727272727273], [116, 164, 4.022727272727273], [110, 168, 3.0], [153, 171, 2.0212765957446805], [133, 171, 22.02127659574468], [113, 171, 8.02127659574468], [199, 174, 2.0105263157894737], [179, 174, 22.010526315789473], [159, 174, 42.01052631578948], [139, 174, 36.01052631578948], [119, 174, 16.010526315789477], [102, 181, 2.0098039215686274], [122, 181, 22.009803921568626], [142, 181, 42.009803921568626], [162, 181, 42.009803921568626], [182, 181, 22.009803921568633], [202, 181, 2.0098039215686327], [99, 189, 2.0091743119266052], [119, 189, 22.009174311926607], [139, 189, 42.00917431192661], [159, 189, 50.00917431192661], [179, 189, 30.0091743119266], [199, 189, 10.0091743119266], [97, 199, 2.008928571428571], [117, 199, 22.008928571428573], [137, 199, 42.00892857142857], [157, 199, 52.00892857142857], [177, 199, 32.00892857142857], [197, 199, 12.00892857142857], [97, 209, 2.008928571428571], [117, 209, 22.008928571428573], [137, 209, 42.00892857142857], [157, 209, 52.00892857142857], [177, 209, 32.00892857142857], [197, 209, 12.00892857142857], [98, 219, 2.009090909090909], [118, 219, 22.009090909090908], [138, 219, 42.00909090909091], [158, 219, 50.00909090909091], [178, 219, 30.009090909090915], [198, 219, 10.009090909090915], [202, 228, 2.0097087378640777], [182, 228, 22.009708737864077], [162, 228, 42.00970873786408], [142, 228, 44.00970873786408], [122, 228, 24.009708737864074], [102, 228, 4.009708737864074], [199, 235, 2.010416666666667], [179, 235, 22.010416666666668], [159, 235, 42.010416666666664], [139, 235, 36.010416666666664], [119, 235, 16.01041666666667], [196, 241, 2.011111111111111], [176, 241, 22.011111111111113], [156, 241, 42.01111111111111], [136, 241, 30.011111111111113], [116, 241, 10.011111111111106], [192, 247, 2.0121951219512195], [172, 247, 22.01219512195122], [152, 247, 42.01219512195122], [132, 247, 22.012195121951223], [112, 247, 2.0121951219512226], [117, 253, 3.0], [184, 258, 2.015625], [164, 258, 22.015625], [144, 258, 24.015625], [124, 258, 4.015625], [179, 263, 2.0185185185185186], [159, 263, 22.01851851851852], [139, 263, 14.018518518518519], [173, 267, 2.0232558139534884], [153, 267, 22.02325581395349], [133, 267, 4.02325581395349], [142, 270, 2.5], [155, 272, 2.142857142857143]]
        links = []

        for i in range(len(verts))[:6:]:
            if (i == 0):
                links.append(genomeB.JSONLink(name=i, parent_name="None", recur=2)) 
            else:
                #attempt for triangle
                # for j in range(2):
                #     links.append(genomeB.JSONLink(name=i, parent_name=j, recur=2))
                if (i < 3):
                    links.append(genomeB.JSONLink(name=i, parent_name=0, recur=0))

                #attempt for square 
                for j in range(3):
                    #print(i, j)
                    links.append(genomeB.JSONLink(name=i, parent_name=j+i+1, recur=0))
                    
                # print("Name: ", links[i].name, links[i].parent_name)
                #normal
                #links.append(genomeB.JSONLink(name=i, parent_name=i+1, recur=1))

        exp_links = []
        for i in range(len(links)):
            # if (type(links[i].name) != int):
            #     links[i].name = i
            exp_links.append(links[i])
            genomeB.Genome.expandLinks(links[i], links, exp_links)  #links[i].name,  

        names = [l.name for l in exp_links]
        parent_names = [l.parent_name for l in exp_links]
        print(names)
        print(parent_names)
        #print(len(names))
    # #     # self.assertEqual(len(exp_links), 5)

unittest.main()